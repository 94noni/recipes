{
    "locks": {
        "symfony/console": {
            "version": "3.3",
            "recipe": {
                "repo": "3.3",
                "branch": "master",
                "version": "3.3",
                "ref": "524e110a6284dae4172aa8cc32db6f819428f6ac"
            }
        }
    },
    "manifests": {
        "symfony/console": {
            "repository": "github.com/symfony/recipes",
            "package": "symfony/console",
            "version": "3.3",
            "manifest": {
                "copy-from-recipe": {
                    "bin/": "%BIN_DIR%/",
                    "config/": "%CONFIG_DIR%/"
                },
                "aliases": [
                    "cli"
                ]
            },
            "files": {
                "config/bootstrap.php": {
                    "contents": "<?php\n\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\nrequire dirname(__DIR__).'/vendor/autoload.php';\n\nif (!class_exists(Dotenv::class)) {\n    throw new LogicException('Please run \"composer require symfony/dotenv\" to load the \".env\" files configuring the application.');\n}\n\n// Load cached env vars if the .env.local.php file exists\n// Run \"composer dump-env prod\" to create it (requires symfony/flex >=1.2)\nif (is_array($env = @include dirname(__DIR__).'/.env.local.php') && (!isset($env['APP_ENV']) || ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? $env['APP_ENV']) === $env['APP_ENV'])) {\n    (new Dotenv(false))->populate($env);\n} else {\n    $path = dirname(__DIR__).'/.env';\n    $dotenv = new Dotenv(false);\n\n    // load all the .env files\n    if (method_exists($dotenv, 'loadEnv')) {\n        $dotenv->loadEnv($path);\n    } else {\n        // fallback code in case your Dotenv component is not 4.2 or higher (when loadEnv() was added)\n\n        if (file_exists($path) || !file_exists($p = \"$path.dist\")) {\n            $dotenv->load($path);\n        } else {\n            $dotenv->load($p);\n        }\n\n        if (null === $env = $_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) {\n            $dotenv->populate(array('APP_ENV' => $env = 'dev'));\n        }\n\n        if ('test' !== $env && file_exists($p = \"$path.local\")) {\n            $dotenv->load($p);\n            $env = $_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? $env;\n        }\n\n        if (file_exists($p = \"$path.$env\")) {\n            $dotenv->load($p);\n        }\n\n        if (file_exists($p = \"$path.$env.local\")) {\n            $dotenv->load($p);\n        }\n    }\n}\n\n$_SERVER += $_ENV;\n$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) ?: 'dev';\n$_SERVER['APP_DEBUG'] = $_SERVER['APP_DEBUG'] ?? $_ENV['APP_DEBUG'] ?? 'prod' !== $_SERVER['APP_ENV'];\n$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = (int) $_SERVER['APP_DEBUG'] || filter_var($_SERVER['APP_DEBUG'], FILTER_VALIDATE_BOOLEAN) ? '1' : '0';\n",
                    "executable": false,
                    "encoding": ""
                },
                "bin/console": {
                    "contents": "#!/usr/bin/env php\n<?php\n\nuse App\\Kernel;\nuse Symfony\\Bundle\\FrameworkBundle\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\nuse Symfony\\Component\\Debug\\Debug;\n\nif (!in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {\n    echo 'Warning: The console should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;\n}\n\nset_time_limit(0);\n\nrequire dirname(__DIR__).'/vendor/autoload.php';\n\nif (!class_exists(Application::class)) {\n    throw new LogicException('You need to add \"symfony/framework-bundle\" as a Composer dependency.');\n}\n\n$input = new ArgvInput();\nif (null !== $env = $input->getParameterOption(['--env', '-e'], null, true)) {\n    putenv('APP_ENV='.$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = $env);\n}\n\nif ($input->hasParameterOption('--no-debug', true)) {\n    putenv('APP_DEBUG='.$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = '0');\n}\n\nrequire dirname(__DIR__).'/config/bootstrap.php';\n\nif ($_SERVER['APP_DEBUG']) {\n    umask(0000);\n\n    if (class_exists(Debug::class)) {\n        Debug::enable();\n    }\n}\n\n$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);\n$application = new Application($kernel);\n$application->run($input);\n",
                    "executable": true,
                    "encoding": ""
                }
            },
            "origin": "symfony/console:3.3@github.com/symfony/recipes:master",
            "is_contrib": false
        }
    }
}